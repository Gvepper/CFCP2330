class JumpMan {
    field int x, y; //screen location of CENTER of man
    field int size; //half of width of square ("radius", if you will)
    field int xVel, yVel;
    field boolean onGround;
    field boolean againstWall;

    constructor JumpMan new(int inX, int inY, int inSize) {
        let x = inX;
        let y = inY;
        let xVel = 0;
        let yVel = 0;
        let size = inSize;
        let onGround = false;
        let againstWall = false;
        do draw();
        return this;
    }

    method void respawn(int inX, int inY) {
        do erase();
        let x = inX;
        let y = inY;
        let xVel = 0;
        let yVel = 0;
        let onGround = false;
        let againstWall = false;
        do draw();
        return;
    }

    method void setOnGround(boolean in) {
        let onGround = in;
        return;
    }

    method void setAgainstWall(boolean in) {
        let againstWall = in;
        return;
    }

    method void setxVel(int in) {
        let xVel = in;
        return;
    }

    method void setyVel(int in) {
        let yVel = in;
        return;
    }

    method int getxVel() {
        return xVel;
    }

    method int getyVel() {
        return yVel;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getEdgeL() {
        return x - size;
    }

    method int getEdgeR() {
        return x + size;
    }

    method int getEdgeT() {
        return y - size;
    }

    method int getEdgeB() {
        return y + size;
    }

    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(getEdgeL(), getEdgeT(), getEdgeR(), getEdgeB());
        return;
    }

    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(getEdgeL(), getEdgeT(), getEdgeR(), getEdgeB());
        return;
    }

    method boolean checkInPit() {
        if (getEdgeB() < 254) {
            return false;
        } else {
            return true;
        }
    }

    method boolean checkAtEnd() {
        if (getEdgeR() < 510) {
            return false;
        } else {
            return true;
        }
    }
    
    method void jump() {
        if (onGround) {
            let yVel = -9;
        }
        return;
    }

    method void moveRight() {
        let xVel = 4;
        return;
    }

    method void stopMoving() {
        let xVel = 0;
        return;
    }
    
    method void calcVels() {
        if (~onGround) {     //gravitational acceleration
            let yVel = yVel + 1;
        }

        if (~againstWall) {
            do moveRight();
        } else {
            do stopMoving();
        }

        return;
    }

    method void moveStep() {
        do erase();
        let x = x + xVel;
        let y = y + yVel;
        do draw();
        do Sys.wait(25);
        return;
    }
}