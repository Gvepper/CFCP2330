class JumpMan {
    field int x, y; //screen location of CENTER of man
    field int size; //half of width of square ("radius", if you will)
    field int xVel, yVel;

    constructor JumpMan new(int inX, int inY, int inSize) {
        let x = inX;
        let y = inY;
        let xVel = 0;
        let yVel = 0;
        let size = inSize;
        do draw();
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getEdgeL() {
        return x - size;
    }

    method int getEdgeR() {
        return x + size;
    }

    method int getEdgeT() {
        return y - size;
    }

    method int getEdgeB() {
        return y + size;
    }

    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(getEdgeL(), getEdgeT(), getEdgeR(), getEdgeB());
        return;
    }

    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(getEdgeL(), getEdgeT(), getEdgeR(), getEdgeB());
        return;
    }

    method boolean checkOnGround() {
        if (getEdgeB() < 254) {
            return false;
        } else {
            return true;
        }
    }

    // method void fall() {
    //     do checkOnGround();
    //     if (~onGround) {
    //         do erase();
    //         let y = y + 2;
    //         do draw();
    //     }
    //     return;
    // }

    
    method void jump() {
        if (checkOnGround()) {
            let yVel = -10;
        }
        return;
    }
    
    method void calcVels() {
        if (~checkOnGround()) {     //gravitational acceleration
            let yVel = yVel + 1;
        }
        
        if ((getEdgeR() + xVel) > 510) {    //check against right wall
            let xVel = 510 - getEdgeR();
        } else {
            if ((getEdgeL() + xVel) < 1) {    //check against left wall
                let xVel = 1 - getEdgeL();
            }
        }

        if ((getEdgeB() + yVel) > 254) {    //check against bottom wall
            let yVel = 254 - getEdgeB();
        } else {
            if ((getEdgeT() + yVel) < 1) {   //check against top wall
                let yVel = 1 - getEdgeT();
            }
        }

        return;
    }

    method void moveStep() {
        do erase();
        do calcVels();
        let x = x + xVel;
        let y = y + yVel;
        do draw();
        do Sys.wait(25);
        return;
    }
}